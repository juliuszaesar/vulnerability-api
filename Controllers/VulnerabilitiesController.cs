using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using VulnerabilityApi.Data;
using VulnerabilityApi.Entities;

namespace VulnerabilityApi.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class VulnerabilitiesController : ControllerBase
    {
        private readonly DataContext _context;

        public VulnerabilitiesController(DataContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<List<Vulnerability>>> GetAllVulnerabilities()
        {
            var vulnerabilities = await _context.Vulnerabilities.ToListAsync();
            return Ok(vulnerabilities);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<Vulnerability>> GetVulnerability(string id)
        {
            var vulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (vulnerability is null)
                return NotFound("Vulnerability not found.");

            return Ok(vulnerability);
        }

        [HttpPost]
        public async Task<IActionResult> AddVulnerability(Vulnerability vulnerability)
        {
            _context.Vulnerabilities.Add(vulnerability);

            // Error handling for database update issues
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                return StatusCode(
                    StatusCodes.Status500InternalServerError,
                    "Error occurred when creating the vulnerability."
                );
            }

            return CreatedAtAction(
                nameof(GetVulnerability),
                new { id = vulnerability.Id },
                vulnerability
            );
        }

        [HttpPut("{id}")]
        public async Task<ActionResult<Vulnerability>> UpdateVulnerability(
            string id,
            Vulnerability updatedVulnerability
        )
        {
            if (id != updatedVulnerability.Id)
                return BadRequest("The ID does not match the ID in the request body");

            var dbVulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (dbVulnerability is null)
                return NotFound("Vulnerability not found");

            dbVulnerability.Name = updatedVulnerability.Name;
            dbVulnerability.Type = updatedVulnerability.Type;
            dbVulnerability.Created = updatedVulnerability.Created;
            dbVulnerability.Modified = updatedVulnerability.Modified;
            dbVulnerability.SpecVersion = updatedVulnerability.SpecVersion;

            // Error handling for concurrency issues
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!VulnerabilityExists(id))
                    return NotFound();
                else
                    throw;
            }

            return Ok(dbVulnerability);
        }

        [HttpDelete]
        public async Task<IActionResult> DeleteVulnerability(string id)
        {
            var dbVulnerability = await _context.Vulnerabilities.FindAsync(id);
            if (dbVulnerability is null)
                return NotFound("Vulnerability not found");

            _context.Vulnerabilities.Remove(dbVulnerability);

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!VulnerabilityExists(id))
                    return NotFound();
                else
                    throw;
            }

            return NoContent();
        }

        // Helper method to check if a vulnerability exists
        private bool VulnerabilityExists(string id)
        {
            return _context.Vulnerabilities.Any(e => e.Id == id);
        }
    }
}

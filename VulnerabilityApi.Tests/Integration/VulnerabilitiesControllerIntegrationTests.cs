using System.Net;
using System.Net.Http.Json;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using VulnerabilityApi.Data;
using VulnerabilityApi.Entities;

namespace VulnerabilityApi.Tests.Integration
{
    public class VulnerabilitiesControllerIntegrationTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly WebApplicationFactory<Program> _factory;

        public VulnerabilitiesControllerIntegrationTests(WebApplicationFactory<Program> factory)
        {
            _factory = factory.WithWebHostBuilder(builder =>
            {
                builder.ConfigureServices(services =>
                {
                    var descriptor = services.SingleOrDefault(
                        d => d.ServiceType == typeof(DbContextOptions<DataContext>));

                    if (descriptor != null)
                    {
                        services.Remove(descriptor);
                    }
                    
                    services.AddDbContext<DataContext>(options =>
                    {
                        options.UseInMemoryDatabase("VulnerabilityTestDatabase");
                    });

                    var sp = services.BuildServiceProvider();

                    using (var scope = sp.CreateScope())
                    {
                        var scopedServices = scope.ServiceProvider;
                        var db = scopedServices.GetRequiredService<DataContext>();

                        db.Database.EnsureCreated();

                        if (!db.Vulnerabilities.Any())
                        {
                            db.Vulnerabilities.AddRange(
                                new Vulnerability
                                {
                                    Id = "vulnerability--0c7b5b88-8ff7-4a4d-aa9d-feb398cd0001",
                                    Name = "TestVulnerability1",
                                },
                                new Vulnerability
                                {
                                    Id = "vulnerability--0c7b5b88-8ff7-4a4d-aa9d-feb398cd0002",
                                    Name = "TestVulnerability2"
                                }
                            );
                            db.SaveChanges();
                        }
                    }
                });
            });
        }

        [Fact]
        public async Task GetVulnerabilities_ReturnsAllVulnerabilities()
        {
            // Arrange
            var client = _factory.CreateClient();
            
            // Act
            var response = await client.GetAsync("/vulnerabilities");
            var vulnerabilities = await response.Content.ReadFromJsonAsync<List<Vulnerability>>();
            
            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(vulnerabilities);
            Assert.Equal(2, vulnerabilities.Count);
        }
    }
}
